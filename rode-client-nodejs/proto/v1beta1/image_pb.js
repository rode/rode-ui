// source: proto/v1beta1/image.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.grafeas.v1beta1.image.Basis', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.image.Derived', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.image.Details', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.image.Fingerprint', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.image.Layer', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.image.Layer.Directive', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grafeas.v1beta1.image.Layer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grafeas.v1beta1.image.Layer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grafeas.v1beta1.image.Layer.displayName = 'proto.grafeas.v1beta1.image.Layer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grafeas.v1beta1.image.Fingerprint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grafeas.v1beta1.image.Fingerprint.repeatedFields_, null);
};
goog.inherits(proto.grafeas.v1beta1.image.Fingerprint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grafeas.v1beta1.image.Fingerprint.displayName = 'proto.grafeas.v1beta1.image.Fingerprint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grafeas.v1beta1.image.Basis = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grafeas.v1beta1.image.Basis, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grafeas.v1beta1.image.Basis.displayName = 'proto.grafeas.v1beta1.image.Basis';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grafeas.v1beta1.image.Details = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grafeas.v1beta1.image.Details, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grafeas.v1beta1.image.Details.displayName = 'proto.grafeas.v1beta1.image.Details';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grafeas.v1beta1.image.Derived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grafeas.v1beta1.image.Derived.repeatedFields_, null);
};
goog.inherits(proto.grafeas.v1beta1.image.Derived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grafeas.v1beta1.image.Derived.displayName = 'proto.grafeas.v1beta1.image.Derived';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grafeas.v1beta1.image.Layer.prototype.toObject = function(opt_includeInstance) {
  return proto.grafeas.v1beta1.image.Layer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grafeas.v1beta1.image.Layer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.image.Layer.toObject = function(includeInstance, msg) {
  var f, obj = {
    directive: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arguments: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grafeas.v1beta1.image.Layer}
 */
proto.grafeas.v1beta1.image.Layer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grafeas.v1beta1.image.Layer;
  return proto.grafeas.v1beta1.image.Layer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grafeas.v1beta1.image.Layer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grafeas.v1beta1.image.Layer}
 */
proto.grafeas.v1beta1.image.Layer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.grafeas.v1beta1.image.Layer.Directive} */ (reader.readEnum());
      msg.setDirective(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setArguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.image.Layer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grafeas.v1beta1.image.Layer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grafeas.v1beta1.image.Layer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.image.Layer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirective();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArguments();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.grafeas.v1beta1.image.Layer.Directive = {
  DIRECTIVE_UNSPECIFIED: 0,
  MAINTAINER: 1,
  RUN: 2,
  CMD: 3,
  LABEL: 4,
  EXPOSE: 5,
  ENV: 6,
  ADD: 7,
  COPY: 8,
  ENTRYPOINT: 9,
  VOLUME: 10,
  USER: 11,
  WORKDIR: 12,
  ARG: 13,
  ONBUILD: 14,
  STOPSIGNAL: 15,
  HEALTHCHECK: 16,
  SHELL: 17
};

/**
 * optional Directive directive = 1;
 * @return {!proto.grafeas.v1beta1.image.Layer.Directive}
 */
proto.grafeas.v1beta1.image.Layer.prototype.getDirective = function() {
  return /** @type {!proto.grafeas.v1beta1.image.Layer.Directive} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.grafeas.v1beta1.image.Layer.Directive} value
 * @return {!proto.grafeas.v1beta1.image.Layer} returns this
 */
proto.grafeas.v1beta1.image.Layer.prototype.setDirective = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string arguments = 2;
 * @return {string}
 */
proto.grafeas.v1beta1.image.Layer.prototype.getArguments = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grafeas.v1beta1.image.Layer} returns this
 */
proto.grafeas.v1beta1.image.Layer.prototype.setArguments = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grafeas.v1beta1.image.Fingerprint.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grafeas.v1beta1.image.Fingerprint.prototype.toObject = function(opt_includeInstance) {
  return proto.grafeas.v1beta1.image.Fingerprint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grafeas.v1beta1.image.Fingerprint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.image.Fingerprint.toObject = function(includeInstance, msg) {
  var f, obj = {
    v1Name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    v2BlobList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    v2Name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grafeas.v1beta1.image.Fingerprint}
 */
proto.grafeas.v1beta1.image.Fingerprint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grafeas.v1beta1.image.Fingerprint;
  return proto.grafeas.v1beta1.image.Fingerprint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grafeas.v1beta1.image.Fingerprint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grafeas.v1beta1.image.Fingerprint}
 */
proto.grafeas.v1beta1.image.Fingerprint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setV1Name(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addV2Blob(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setV2Name(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.image.Fingerprint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grafeas.v1beta1.image.Fingerprint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grafeas.v1beta1.image.Fingerprint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.image.Fingerprint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV1Name();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getV2BlobList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getV2Name();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string v1_name = 1;
 * @return {string}
 */
proto.grafeas.v1beta1.image.Fingerprint.prototype.getV1Name = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grafeas.v1beta1.image.Fingerprint} returns this
 */
proto.grafeas.v1beta1.image.Fingerprint.prototype.setV1Name = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string v2_blob = 2;
 * @return {!Array<string>}
 */
proto.grafeas.v1beta1.image.Fingerprint.prototype.getV2BlobList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.grafeas.v1beta1.image.Fingerprint} returns this
 */
proto.grafeas.v1beta1.image.Fingerprint.prototype.setV2BlobList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.grafeas.v1beta1.image.Fingerprint} returns this
 */
proto.grafeas.v1beta1.image.Fingerprint.prototype.addV2Blob = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grafeas.v1beta1.image.Fingerprint} returns this
 */
proto.grafeas.v1beta1.image.Fingerprint.prototype.clearV2BlobList = function() {
  return this.setV2BlobList([]);
};


/**
 * optional string v2_name = 3;
 * @return {string}
 */
proto.grafeas.v1beta1.image.Fingerprint.prototype.getV2Name = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.grafeas.v1beta1.image.Fingerprint} returns this
 */
proto.grafeas.v1beta1.image.Fingerprint.prototype.setV2Name = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grafeas.v1beta1.image.Basis.prototype.toObject = function(opt_includeInstance) {
  return proto.grafeas.v1beta1.image.Basis.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grafeas.v1beta1.image.Basis} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.image.Basis.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fingerprint: (f = msg.getFingerprint()) && proto.grafeas.v1beta1.image.Fingerprint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grafeas.v1beta1.image.Basis}
 */
proto.grafeas.v1beta1.image.Basis.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grafeas.v1beta1.image.Basis;
  return proto.grafeas.v1beta1.image.Basis.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grafeas.v1beta1.image.Basis} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grafeas.v1beta1.image.Basis}
 */
proto.grafeas.v1beta1.image.Basis.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResourceUrl(value);
      break;
    case 2:
      var value = new proto.grafeas.v1beta1.image.Fingerprint;
      reader.readMessage(value,proto.grafeas.v1beta1.image.Fingerprint.deserializeBinaryFromReader);
      msg.setFingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.image.Basis.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grafeas.v1beta1.image.Basis.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grafeas.v1beta1.image.Basis} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.image.Basis.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFingerprint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grafeas.v1beta1.image.Fingerprint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string resource_url = 1;
 * @return {string}
 */
proto.grafeas.v1beta1.image.Basis.prototype.getResourceUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grafeas.v1beta1.image.Basis} returns this
 */
proto.grafeas.v1beta1.image.Basis.prototype.setResourceUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Fingerprint fingerprint = 2;
 * @return {?proto.grafeas.v1beta1.image.Fingerprint}
 */
proto.grafeas.v1beta1.image.Basis.prototype.getFingerprint = function() {
  return /** @type{?proto.grafeas.v1beta1.image.Fingerprint} */ (
    jspb.Message.getWrapperField(this, proto.grafeas.v1beta1.image.Fingerprint, 2));
};


/**
 * @param {?proto.grafeas.v1beta1.image.Fingerprint|undefined} value
 * @return {!proto.grafeas.v1beta1.image.Basis} returns this
*/
proto.grafeas.v1beta1.image.Basis.prototype.setFingerprint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grafeas.v1beta1.image.Basis} returns this
 */
proto.grafeas.v1beta1.image.Basis.prototype.clearFingerprint = function() {
  return this.setFingerprint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grafeas.v1beta1.image.Basis.prototype.hasFingerprint = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grafeas.v1beta1.image.Details.prototype.toObject = function(opt_includeInstance) {
  return proto.grafeas.v1beta1.image.Details.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grafeas.v1beta1.image.Details} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.image.Details.toObject = function(includeInstance, msg) {
  var f, obj = {
    derivedImage: (f = msg.getDerivedImage()) && proto.grafeas.v1beta1.image.Derived.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grafeas.v1beta1.image.Details}
 */
proto.grafeas.v1beta1.image.Details.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grafeas.v1beta1.image.Details;
  return proto.grafeas.v1beta1.image.Details.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grafeas.v1beta1.image.Details} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grafeas.v1beta1.image.Details}
 */
proto.grafeas.v1beta1.image.Details.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grafeas.v1beta1.image.Derived;
      reader.readMessage(value,proto.grafeas.v1beta1.image.Derived.deserializeBinaryFromReader);
      msg.setDerivedImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.image.Details.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grafeas.v1beta1.image.Details.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grafeas.v1beta1.image.Details} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.image.Details.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDerivedImage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grafeas.v1beta1.image.Derived.serializeBinaryToWriter
    );
  }
};


/**
 * optional Derived derived_image = 1;
 * @return {?proto.grafeas.v1beta1.image.Derived}
 */
proto.grafeas.v1beta1.image.Details.prototype.getDerivedImage = function() {
  return /** @type{?proto.grafeas.v1beta1.image.Derived} */ (
    jspb.Message.getWrapperField(this, proto.grafeas.v1beta1.image.Derived, 1));
};


/**
 * @param {?proto.grafeas.v1beta1.image.Derived|undefined} value
 * @return {!proto.grafeas.v1beta1.image.Details} returns this
*/
proto.grafeas.v1beta1.image.Details.prototype.setDerivedImage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grafeas.v1beta1.image.Details} returns this
 */
proto.grafeas.v1beta1.image.Details.prototype.clearDerivedImage = function() {
  return this.setDerivedImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grafeas.v1beta1.image.Details.prototype.hasDerivedImage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grafeas.v1beta1.image.Derived.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grafeas.v1beta1.image.Derived.prototype.toObject = function(opt_includeInstance) {
  return proto.grafeas.v1beta1.image.Derived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grafeas.v1beta1.image.Derived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.image.Derived.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerprint: (f = msg.getFingerprint()) && proto.grafeas.v1beta1.image.Fingerprint.toObject(includeInstance, f),
    distance: jspb.Message.getFieldWithDefault(msg, 2, 0),
    layerInfoList: jspb.Message.toObjectList(msg.getLayerInfoList(),
    proto.grafeas.v1beta1.image.Layer.toObject, includeInstance),
    baseResourceUrl: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grafeas.v1beta1.image.Derived}
 */
proto.grafeas.v1beta1.image.Derived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grafeas.v1beta1.image.Derived;
  return proto.grafeas.v1beta1.image.Derived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grafeas.v1beta1.image.Derived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grafeas.v1beta1.image.Derived}
 */
proto.grafeas.v1beta1.image.Derived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grafeas.v1beta1.image.Fingerprint;
      reader.readMessage(value,proto.grafeas.v1beta1.image.Fingerprint.deserializeBinaryFromReader);
      msg.setFingerprint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistance(value);
      break;
    case 3:
      var value = new proto.grafeas.v1beta1.image.Layer;
      reader.readMessage(value,proto.grafeas.v1beta1.image.Layer.deserializeBinaryFromReader);
      msg.addLayerInfo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseResourceUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.image.Derived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grafeas.v1beta1.image.Derived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grafeas.v1beta1.image.Derived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.image.Derived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFingerprint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grafeas.v1beta1.image.Fingerprint.serializeBinaryToWriter
    );
  }
  f = message.getDistance();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLayerInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.grafeas.v1beta1.image.Layer.serializeBinaryToWriter
    );
  }
  f = message.getBaseResourceUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Fingerprint fingerprint = 1;
 * @return {?proto.grafeas.v1beta1.image.Fingerprint}
 */
proto.grafeas.v1beta1.image.Derived.prototype.getFingerprint = function() {
  return /** @type{?proto.grafeas.v1beta1.image.Fingerprint} */ (
    jspb.Message.getWrapperField(this, proto.grafeas.v1beta1.image.Fingerprint, 1));
};


/**
 * @param {?proto.grafeas.v1beta1.image.Fingerprint|undefined} value
 * @return {!proto.grafeas.v1beta1.image.Derived} returns this
*/
proto.grafeas.v1beta1.image.Derived.prototype.setFingerprint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grafeas.v1beta1.image.Derived} returns this
 */
proto.grafeas.v1beta1.image.Derived.prototype.clearFingerprint = function() {
  return this.setFingerprint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grafeas.v1beta1.image.Derived.prototype.hasFingerprint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 distance = 2;
 * @return {number}
 */
proto.grafeas.v1beta1.image.Derived.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.grafeas.v1beta1.image.Derived} returns this
 */
proto.grafeas.v1beta1.image.Derived.prototype.setDistance = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Layer layer_info = 3;
 * @return {!Array<!proto.grafeas.v1beta1.image.Layer>}
 */
proto.grafeas.v1beta1.image.Derived.prototype.getLayerInfoList = function() {
  return /** @type{!Array<!proto.grafeas.v1beta1.image.Layer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grafeas.v1beta1.image.Layer, 3));
};


/**
 * @param {!Array<!proto.grafeas.v1beta1.image.Layer>} value
 * @return {!proto.grafeas.v1beta1.image.Derived} returns this
*/
proto.grafeas.v1beta1.image.Derived.prototype.setLayerInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.grafeas.v1beta1.image.Layer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grafeas.v1beta1.image.Layer}
 */
proto.grafeas.v1beta1.image.Derived.prototype.addLayerInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.grafeas.v1beta1.image.Layer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grafeas.v1beta1.image.Derived} returns this
 */
proto.grafeas.v1beta1.image.Derived.prototype.clearLayerInfoList = function() {
  return this.setLayerInfoList([]);
};


/**
 * optional string base_resource_url = 4;
 * @return {string}
 */
proto.grafeas.v1beta1.image.Derived.prototype.getBaseResourceUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.grafeas.v1beta1.image.Derived} returns this
 */
proto.grafeas.v1beta1.image.Derived.prototype.setBaseResourceUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.grafeas.v1beta1.image);
