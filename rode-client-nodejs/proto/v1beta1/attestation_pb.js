// source: proto/v1beta1/attestation.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_v1beta1_common_pb = require('../../proto/v1beta1/common_pb.js');
goog.object.extend(proto, proto_v1beta1_common_pb);
goog.exportSymbol('proto.grafeas.v1beta1.attestation.Attestation', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.attestation.Attestation.SignatureCase', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.attestation.Authority', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.attestation.Authority.Hint', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.attestation.Details', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.attestation.GenericSignedAttestation', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.attestation.GenericSignedAttestation.ContentType', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.attestation.PgpSignedAttestation', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType', null, global);
goog.exportSymbol('proto.grafeas.v1beta1.attestation.PgpSignedAttestation.KeyIdCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grafeas.v1beta1.attestation.PgpSignedAttestation.oneofGroups_);
};
goog.inherits(proto.grafeas.v1beta1.attestation.PgpSignedAttestation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grafeas.v1beta1.attestation.PgpSignedAttestation.displayName = 'proto.grafeas.v1beta1.attestation.PgpSignedAttestation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grafeas.v1beta1.attestation.GenericSignedAttestation.repeatedFields_, null);
};
goog.inherits(proto.grafeas.v1beta1.attestation.GenericSignedAttestation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grafeas.v1beta1.attestation.GenericSignedAttestation.displayName = 'proto.grafeas.v1beta1.attestation.GenericSignedAttestation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grafeas.v1beta1.attestation.Authority = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grafeas.v1beta1.attestation.Authority, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grafeas.v1beta1.attestation.Authority.displayName = 'proto.grafeas.v1beta1.attestation.Authority';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grafeas.v1beta1.attestation.Authority.Hint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grafeas.v1beta1.attestation.Authority.Hint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grafeas.v1beta1.attestation.Authority.Hint.displayName = 'proto.grafeas.v1beta1.attestation.Authority.Hint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grafeas.v1beta1.attestation.Details = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grafeas.v1beta1.attestation.Details, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grafeas.v1beta1.attestation.Details.displayName = 'proto.grafeas.v1beta1.attestation.Details';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grafeas.v1beta1.attestation.Attestation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grafeas.v1beta1.attestation.Attestation.oneofGroups_);
};
goog.inherits(proto.grafeas.v1beta1.attestation.Attestation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grafeas.v1beta1.attestation.Attestation.displayName = 'proto.grafeas.v1beta1.attestation.Attestation';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.KeyIdCase = {
  KEY_ID_NOT_SET: 0,
  PGP_KEY_ID: 2
};

/**
 * @return {proto.grafeas.v1beta1.attestation.PgpSignedAttestation.KeyIdCase}
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.prototype.getKeyIdCase = function() {
  return /** @type {proto.grafeas.v1beta1.attestation.PgpSignedAttestation.KeyIdCase} */(jspb.Message.computeOneofCase(this, proto.grafeas.v1beta1.attestation.PgpSignedAttestation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.prototype.toObject = function(opt_includeInstance) {
  return proto.grafeas.v1beta1.attestation.PgpSignedAttestation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contentType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pgpKeyId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation}
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grafeas.v1beta1.attestation.PgpSignedAttestation;
  return proto.grafeas.v1beta1.attestation.PgpSignedAttestation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation}
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType} */ (reader.readEnum());
      msg.setContentType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPgpKeyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grafeas.v1beta1.attestation.PgpSignedAttestation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContentType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType = {
  CONTENT_TYPE_UNSPECIFIED: 0,
  SIMPLE_SIGNING_JSON: 1
};

/**
 * optional string signature = 1;
 * @return {string}
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation} returns this
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ContentType content_type = 3;
 * @return {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType}
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.prototype.getContentType = function() {
  return /** @type {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType} value
 * @return {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation} returns this
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.prototype.setContentType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string pgp_key_id = 2;
 * @return {string}
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.prototype.getPgpKeyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation} returns this
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.prototype.setPgpKeyId = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.grafeas.v1beta1.attestation.PgpSignedAttestation.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.grafeas.v1beta1.attestation.PgpSignedAttestation} returns this
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.prototype.clearPgpKeyId = function() {
  return jspb.Message.setOneofField(this, 2, proto.grafeas.v1beta1.attestation.PgpSignedAttestation.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grafeas.v1beta1.attestation.PgpSignedAttestation.prototype.hasPgpKeyId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.toObject = function(opt_includeInstance) {
  return proto.grafeas.v1beta1.attestation.GenericSignedAttestation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.toObject = function(includeInstance, msg) {
  var f, obj = {
    contentType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serializedPayload: msg.getSerializedPayload_asB64(),
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    proto_v1beta1_common_pb.Signature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation}
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grafeas.v1beta1.attestation.GenericSignedAttestation;
  return proto.grafeas.v1beta1.attestation.GenericSignedAttestation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation}
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation.ContentType} */ (reader.readEnum());
      msg.setContentType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSerializedPayload(value);
      break;
    case 3:
      var value = new proto_v1beta1_common_pb.Signature;
      reader.readMessage(value,proto_v1beta1_common_pb.Signature.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grafeas.v1beta1.attestation.GenericSignedAttestation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContentType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSerializedPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto_v1beta1_common_pb.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.ContentType = {
  CONTENT_TYPE_UNSPECIFIED: 0,
  SIMPLE_SIGNING_JSON: 1
};

/**
 * optional ContentType content_type = 1;
 * @return {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation.ContentType}
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.getContentType = function() {
  return /** @type {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation.ContentType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation.ContentType} value
 * @return {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation} returns this
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.setContentType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes serialized_payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.getSerializedPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes serialized_payload = 2;
 * This is a type-conversion wrapper around `getSerializedPayload()`
 * @return {string}
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.getSerializedPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSerializedPayload()));
};


/**
 * optional bytes serialized_payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSerializedPayload()`
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.getSerializedPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSerializedPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation} returns this
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.setSerializedPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated grafeas.v1beta1.Signature signatures = 3;
 * @return {!Array<!proto.grafeas.v1beta1.Signature>}
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.grafeas.v1beta1.Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_v1beta1_common_pb.Signature, 3));
};


/**
 * @param {!Array<!proto.grafeas.v1beta1.Signature>} value
 * @return {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation} returns this
*/
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.setSignaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.grafeas.v1beta1.Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grafeas.v1beta1.Signature}
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.grafeas.v1beta1.Signature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grafeas.v1beta1.attestation.GenericSignedAttestation} returns this
 */
proto.grafeas.v1beta1.attestation.GenericSignedAttestation.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grafeas.v1beta1.attestation.Authority.prototype.toObject = function(opt_includeInstance) {
  return proto.grafeas.v1beta1.attestation.Authority.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grafeas.v1beta1.attestation.Authority} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.Authority.toObject = function(includeInstance, msg) {
  var f, obj = {
    hint: (f = msg.getHint()) && proto.grafeas.v1beta1.attestation.Authority.Hint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grafeas.v1beta1.attestation.Authority}
 */
proto.grafeas.v1beta1.attestation.Authority.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grafeas.v1beta1.attestation.Authority;
  return proto.grafeas.v1beta1.attestation.Authority.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grafeas.v1beta1.attestation.Authority} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grafeas.v1beta1.attestation.Authority}
 */
proto.grafeas.v1beta1.attestation.Authority.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grafeas.v1beta1.attestation.Authority.Hint;
      reader.readMessage(value,proto.grafeas.v1beta1.attestation.Authority.Hint.deserializeBinaryFromReader);
      msg.setHint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.attestation.Authority.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grafeas.v1beta1.attestation.Authority.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grafeas.v1beta1.attestation.Authority} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.Authority.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grafeas.v1beta1.attestation.Authority.Hint.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grafeas.v1beta1.attestation.Authority.Hint.prototype.toObject = function(opt_includeInstance) {
  return proto.grafeas.v1beta1.attestation.Authority.Hint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grafeas.v1beta1.attestation.Authority.Hint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.Authority.Hint.toObject = function(includeInstance, msg) {
  var f, obj = {
    humanReadableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grafeas.v1beta1.attestation.Authority.Hint}
 */
proto.grafeas.v1beta1.attestation.Authority.Hint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grafeas.v1beta1.attestation.Authority.Hint;
  return proto.grafeas.v1beta1.attestation.Authority.Hint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grafeas.v1beta1.attestation.Authority.Hint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grafeas.v1beta1.attestation.Authority.Hint}
 */
proto.grafeas.v1beta1.attestation.Authority.Hint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHumanReadableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.attestation.Authority.Hint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grafeas.v1beta1.attestation.Authority.Hint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grafeas.v1beta1.attestation.Authority.Hint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.Authority.Hint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHumanReadableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string human_readable_name = 1;
 * @return {string}
 */
proto.grafeas.v1beta1.attestation.Authority.Hint.prototype.getHumanReadableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grafeas.v1beta1.attestation.Authority.Hint} returns this
 */
proto.grafeas.v1beta1.attestation.Authority.Hint.prototype.setHumanReadableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Hint hint = 1;
 * @return {?proto.grafeas.v1beta1.attestation.Authority.Hint}
 */
proto.grafeas.v1beta1.attestation.Authority.prototype.getHint = function() {
  return /** @type{?proto.grafeas.v1beta1.attestation.Authority.Hint} */ (
    jspb.Message.getWrapperField(this, proto.grafeas.v1beta1.attestation.Authority.Hint, 1));
};


/**
 * @param {?proto.grafeas.v1beta1.attestation.Authority.Hint|undefined} value
 * @return {!proto.grafeas.v1beta1.attestation.Authority} returns this
*/
proto.grafeas.v1beta1.attestation.Authority.prototype.setHint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grafeas.v1beta1.attestation.Authority} returns this
 */
proto.grafeas.v1beta1.attestation.Authority.prototype.clearHint = function() {
  return this.setHint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grafeas.v1beta1.attestation.Authority.prototype.hasHint = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grafeas.v1beta1.attestation.Details.prototype.toObject = function(opt_includeInstance) {
  return proto.grafeas.v1beta1.attestation.Details.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grafeas.v1beta1.attestation.Details} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.Details.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestation: (f = msg.getAttestation()) && proto.grafeas.v1beta1.attestation.Attestation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grafeas.v1beta1.attestation.Details}
 */
proto.grafeas.v1beta1.attestation.Details.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grafeas.v1beta1.attestation.Details;
  return proto.grafeas.v1beta1.attestation.Details.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grafeas.v1beta1.attestation.Details} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grafeas.v1beta1.attestation.Details}
 */
proto.grafeas.v1beta1.attestation.Details.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grafeas.v1beta1.attestation.Attestation;
      reader.readMessage(value,proto.grafeas.v1beta1.attestation.Attestation.deserializeBinaryFromReader);
      msg.setAttestation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.attestation.Details.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grafeas.v1beta1.attestation.Details.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grafeas.v1beta1.attestation.Details} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.Details.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grafeas.v1beta1.attestation.Attestation.serializeBinaryToWriter
    );
  }
};


/**
 * optional Attestation attestation = 1;
 * @return {?proto.grafeas.v1beta1.attestation.Attestation}
 */
proto.grafeas.v1beta1.attestation.Details.prototype.getAttestation = function() {
  return /** @type{?proto.grafeas.v1beta1.attestation.Attestation} */ (
    jspb.Message.getWrapperField(this, proto.grafeas.v1beta1.attestation.Attestation, 1));
};


/**
 * @param {?proto.grafeas.v1beta1.attestation.Attestation|undefined} value
 * @return {!proto.grafeas.v1beta1.attestation.Details} returns this
*/
proto.grafeas.v1beta1.attestation.Details.prototype.setAttestation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grafeas.v1beta1.attestation.Details} returns this
 */
proto.grafeas.v1beta1.attestation.Details.prototype.clearAttestation = function() {
  return this.setAttestation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grafeas.v1beta1.attestation.Details.prototype.hasAttestation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grafeas.v1beta1.attestation.Attestation.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.grafeas.v1beta1.attestation.Attestation.SignatureCase = {
  SIGNATURE_NOT_SET: 0,
  PGP_SIGNED_ATTESTATION: 1,
  GENERIC_SIGNED_ATTESTATION: 2
};

/**
 * @return {proto.grafeas.v1beta1.attestation.Attestation.SignatureCase}
 */
proto.grafeas.v1beta1.attestation.Attestation.prototype.getSignatureCase = function() {
  return /** @type {proto.grafeas.v1beta1.attestation.Attestation.SignatureCase} */(jspb.Message.computeOneofCase(this, proto.grafeas.v1beta1.attestation.Attestation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grafeas.v1beta1.attestation.Attestation.prototype.toObject = function(opt_includeInstance) {
  return proto.grafeas.v1beta1.attestation.Attestation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grafeas.v1beta1.attestation.Attestation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.Attestation.toObject = function(includeInstance, msg) {
  var f, obj = {
    pgpSignedAttestation: (f = msg.getPgpSignedAttestation()) && proto.grafeas.v1beta1.attestation.PgpSignedAttestation.toObject(includeInstance, f),
    genericSignedAttestation: (f = msg.getGenericSignedAttestation()) && proto.grafeas.v1beta1.attestation.GenericSignedAttestation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grafeas.v1beta1.attestation.Attestation}
 */
proto.grafeas.v1beta1.attestation.Attestation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grafeas.v1beta1.attestation.Attestation;
  return proto.grafeas.v1beta1.attestation.Attestation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grafeas.v1beta1.attestation.Attestation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grafeas.v1beta1.attestation.Attestation}
 */
proto.grafeas.v1beta1.attestation.Attestation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grafeas.v1beta1.attestation.PgpSignedAttestation;
      reader.readMessage(value,proto.grafeas.v1beta1.attestation.PgpSignedAttestation.deserializeBinaryFromReader);
      msg.setPgpSignedAttestation(value);
      break;
    case 2:
      var value = new proto.grafeas.v1beta1.attestation.GenericSignedAttestation;
      reader.readMessage(value,proto.grafeas.v1beta1.attestation.GenericSignedAttestation.deserializeBinaryFromReader);
      msg.setGenericSignedAttestation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grafeas.v1beta1.attestation.Attestation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grafeas.v1beta1.attestation.Attestation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grafeas.v1beta1.attestation.Attestation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grafeas.v1beta1.attestation.Attestation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPgpSignedAttestation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grafeas.v1beta1.attestation.PgpSignedAttestation.serializeBinaryToWriter
    );
  }
  f = message.getGenericSignedAttestation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grafeas.v1beta1.attestation.GenericSignedAttestation.serializeBinaryToWriter
    );
  }
};


/**
 * optional PgpSignedAttestation pgp_signed_attestation = 1;
 * @return {?proto.grafeas.v1beta1.attestation.PgpSignedAttestation}
 */
proto.grafeas.v1beta1.attestation.Attestation.prototype.getPgpSignedAttestation = function() {
  return /** @type{?proto.grafeas.v1beta1.attestation.PgpSignedAttestation} */ (
    jspb.Message.getWrapperField(this, proto.grafeas.v1beta1.attestation.PgpSignedAttestation, 1));
};


/**
 * @param {?proto.grafeas.v1beta1.attestation.PgpSignedAttestation|undefined} value
 * @return {!proto.grafeas.v1beta1.attestation.Attestation} returns this
*/
proto.grafeas.v1beta1.attestation.Attestation.prototype.setPgpSignedAttestation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.grafeas.v1beta1.attestation.Attestation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grafeas.v1beta1.attestation.Attestation} returns this
 */
proto.grafeas.v1beta1.attestation.Attestation.prototype.clearPgpSignedAttestation = function() {
  return this.setPgpSignedAttestation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grafeas.v1beta1.attestation.Attestation.prototype.hasPgpSignedAttestation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GenericSignedAttestation generic_signed_attestation = 2;
 * @return {?proto.grafeas.v1beta1.attestation.GenericSignedAttestation}
 */
proto.grafeas.v1beta1.attestation.Attestation.prototype.getGenericSignedAttestation = function() {
  return /** @type{?proto.grafeas.v1beta1.attestation.GenericSignedAttestation} */ (
    jspb.Message.getWrapperField(this, proto.grafeas.v1beta1.attestation.GenericSignedAttestation, 2));
};


/**
 * @param {?proto.grafeas.v1beta1.attestation.GenericSignedAttestation|undefined} value
 * @return {!proto.grafeas.v1beta1.attestation.Attestation} returns this
*/
proto.grafeas.v1beta1.attestation.Attestation.prototype.setGenericSignedAttestation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.grafeas.v1beta1.attestation.Attestation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grafeas.v1beta1.attestation.Attestation} returns this
 */
proto.grafeas.v1beta1.attestation.Attestation.prototype.clearGenericSignedAttestation = function() {
  return this.setGenericSignedAttestation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grafeas.v1beta1.attestation.Attestation.prototype.hasGenericSignedAttestation = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.grafeas.v1beta1.attestation);
