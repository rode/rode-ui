/**
 * Copyright 2021 The Rode Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from "react";
import { render, screen } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import VulnerabilityCard from "components/occurrences/VulnerabilityCard";
import { createMockMappedVulnerabilityOccurrence } from "test/testing-utils/mocks";

describe("VulnerabilityCard", () => {
  let vulnerability, rerender;

  beforeEach(() => {
    vulnerability = createMockMappedVulnerabilityOccurrence()
      .vulnerabilities[0];

    const utils = render(<VulnerabilityCard vulnerability={vulnerability} />);
    rerender = utils.rerender;
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it("should show the common details for the vulnerability", () => {
    expect(screen.getByText("Package")).toBeInTheDocument();
    expect(screen.getByText(vulnerability.packageName)).toBeInTheDocument();
    expect(
      screen.getByText(`Severity ${vulnerability.effectiveSeverity}`)
    ).toBeInTheDocument();

    expect(
      screen.getByRole("button", { name: "Toggle Vulnerability Details" })
    ).toBeInTheDocument();
  });

  describe("severity levels", () => {
    it("should show 'N/A' for unspecified severities", () => {
      vulnerability.effectiveSeverity = "SEVERITY_UNSPECIFIED";
      rerender(<VulnerabilityCard vulnerability={vulnerability} />);
      userEvent.click(
        screen.getByRole("button", { name: "Toggle Vulnerability Details" })
      );

      expect(screen.getByText(/severity n\/a/i)).toBeInTheDocument();
      expect(screen.getAllByTitle("Fire")).toHaveLength(1);
    });

    it("should show 'CRITICAL' for critical severities", () => {
      vulnerability.effectiveSeverity = "CRITICAL";
      rerender(<VulnerabilityCard vulnerability={vulnerability} />);
      userEvent.click(
        screen.getByRole("button", { name: "Toggle Vulnerability Details" })
      );

      expect(screen.getByText(/severity critical/i)).toBeInTheDocument();
      expect(screen.getAllByTitle("Fire")).toHaveLength(3);
    });

    it("should show 'HIGH' for high severities", () => {
      vulnerability.effectiveSeverity = "HIGH";
      rerender(<VulnerabilityCard vulnerability={vulnerability} />);
      userEvent.click(
        screen.getByRole("button", { name: "Toggle Vulnerability Details" })
      );

      expect(screen.getByText(/severity high/i)).toBeInTheDocument();
      expect(screen.getAllByTitle("Fire")).toHaveLength(3);
    });

    it("should show 'MEDIUM' for medium severities", () => {
      vulnerability.effectiveSeverity = "MEDIUM";
      rerender(<VulnerabilityCard vulnerability={vulnerability} />);
      userEvent.click(
        screen.getByRole("button", { name: "Toggle Vulnerability Details" })
      );

      expect(screen.getByText(/severity medium/i)).toBeInTheDocument();
      expect(screen.getAllByTitle("Fire")).toHaveLength(2);
    });

    it("should show 'LOW' for low severities", () => {
      vulnerability.effectiveSeverity = "LOW";
      rerender(<VulnerabilityCard vulnerability={vulnerability} />);
      userEvent.click(
        screen.getByRole("button", { name: "Toggle Vulnerability Details" })
      );

      expect(screen.getByText(/severity low/i)).toBeInTheDocument();
      expect(screen.getAllByTitle("Fire")).toHaveLength(1);
    });
  });

  it("should show the description if it exists", () => {
    vulnerability.description = chance.string();

    rerender(<VulnerabilityCard vulnerability={vulnerability} />);
    userEvent.click(
      screen.getByRole("button", { name: "Toggle Vulnerability Details" })
    );

    expect(screen.getByText(vulnerability.description)).toBeInTheDocument();
  });

  it("should show the related urls if they exist", () => {
    vulnerability.relatedUrls = chance.n(
      () => ({ url: chance.url() }),
      chance.d4()
    );

    rerender(<VulnerabilityCard vulnerability={vulnerability} />);
    userEvent.click(
      screen.getByRole("button", { name: "Toggle Vulnerability Details" })
    );

    expect(screen.getByText("Additional references")).toBeInTheDocument();
    vulnerability.relatedUrls.forEach((url, index) => {
      const renderedLink = screen.getByText(index + 1, { selector: "a" });
      expect(renderedLink).toBeInTheDocument();
      expect(renderedLink).toHaveAttribute("href", url.url);
    });
  });
});
