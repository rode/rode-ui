import React from "react";
import { render, screen } from "@testing-library/react";
import { createMockOccurrence } from "test/testing-utils/mocks";
import VulnerabilityOccurrencePreview from "components/occurrences/VulnerabilityOccurrencePreview";

describe("VulnerabilityOccurrencePreview", () => {
  let occurrence, rerender;

  beforeEach(() => {
    occurrence = createMockOccurrence("VULNERABILITY");

    const utils = render(
      <VulnerabilityOccurrencePreview occurrence={occurrence} />
    );
    rerender = utils.rerender;
  });

  it("should show the details of the vulnerability", () => {
    expect(
      screen.getByText(
        occurrence.vulnerability.packageIssue[0].affectedLocation.package,
        { exact: false }
      )
    ).toBeInTheDocument();
    expect(
      screen.getByText(occurrence.vulnerability.type, { exact: false })
    ).toBeInTheDocument();
    expect(
      screen.getByText(occurrence.vulnerability.severity, { exact: false })
    ).toBeInTheDocument();
    expect(
      screen.getByText(occurrence.vulnerability.effectiveSeverity, {
        exact: false,
      })
    ).toBeInTheDocument();
  });

  it("should show the short description if it exists", () => {
    expect(
      screen.getByText(occurrence.vulnerability.shortDescription, {
        exact: false,
      })
    ).toBeInTheDocument();
  });

  it("should show the related urls if any exist", () => {
    expect(
      screen.getByText(/related urls:/i, { exact: false })
    ).toBeInTheDocument();
    occurrence.vulnerability.relatedUrls.forEach((url, index) => {
      const renderedLink = screen.getByText(index + 1);
      expect(renderedLink).toHaveAttribute("href", url.url);
    });
  });

  it("should NOT show the short description if it does not exist", () => {
    occurrence.vulnerability.shortDescription = null;
    rerender(<VulnerabilityOccurrencePreview occurrence={occurrence} />);

    expect(
      screen.queryByText(/description/i, { exact: false })
    ).not.toBeInTheDocument();
  });

  it("should NOT show the related urls if they do not exist", () => {
    occurrence.vulnerability.relatedUrls = null;
    rerender(<VulnerabilityOccurrencePreview occurrence={occurrence} />);

    expect(
      screen.queryByText(/related urls:/i, { exact: false })
    ).not.toBeInTheDocument();
  });
});
