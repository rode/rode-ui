/**
 * Copyright 2021 The Rode Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from "react";
import { render, screen } from "@testing-library/react";
import { within } from "@testing-library/dom";
import VulnerabilityOccurrenceDetails from "components/occurrences/VulnerabilityOccurrenceDetails";
import { createMockMappedVulnerabilityOccurrence } from "test/testing-utils/mocks";
import { getVulnerabilityBreakdown } from "utils/occurrence-utils";
import dayjs from "dayjs";

jest.mock("dayjs");

describe("VulnerabilityOccurrenceDetails", () => {
  let occurrence, rerender;

  beforeEach(() => {
    occurrence = createMockMappedVulnerabilityOccurrence();
    dayjs.mockReturnValue({
      format: jest
        .fn()
        .mockReturnValueOnce(occurrence.started)
        .mockReturnValue(occurrence.completed),
    });

    const utils = render(
      <VulnerabilityOccurrenceDetails occurrence={occurrence} />
    );
    rerender = utils.rerender;
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it("should display the summary details of the scan", () => {
    expect(screen.getByText("Vulnerability Scan")).toBeInTheDocument();
    expect(screen.getByText(/vulnerabilities found/i)).toBeInTheDocument();
    expect(
      screen.getByText(getVulnerabilityBreakdown(occurrence.vulnerabilities))
    ).toBeInTheDocument();
    expect(
      screen.getByText(`Started ${occurrence.started}`)
    ).toBeInTheDocument();
    expect(
      screen.getByText(`Completed ${occurrence.completed}`)
    ).toBeInTheDocument();
  });

  describe("vulnerability cards", () => {
    it("should show the common details for each vulnerability found", () => {
      occurrence.vulnerabilities.forEach((vuln, index) => {
        expect(
          screen.getByText(`Package: ${vuln.packageName}`)
        ).toBeInTheDocument();
        expect(
          screen.queryAllByText(`Severity ${vuln.effectiveSeverity}`)[0]
        ).toBeInTheDocument();

        expect(
          screen.queryAllByText(/more details:/i)[index]
        ).toBeInTheDocument();
        expect(screen.getByText(vuln.cpeUri)).toHaveAttribute(
          "href",
          vuln.cpeUri
        );
      });
    });

    it("should show the description if it exists", () => {
      occurrence.vulnerabilities[0].description = chance.string();

      rerender(<VulnerabilityOccurrenceDetails occurrence={occurrence} />);

      expect(
        screen.getByText(
          `Description: ${occurrence.vulnerabilities[0].description}`
        )
      ).toBeInTheDocument();
    });

    it("should show the related urls if they exists", () => {
      occurrence.vulnerabilities[0].relatedUrls = chance.n(
        () => ({ url: chance.url() }),
        chance.d4()
      );

      rerender(<VulnerabilityOccurrenceDetails occurrence={occurrence} />);

      expect(
        screen.queryAllByText(/additional references:/i)[0]
      ).toBeInTheDocument();
      expect(
        screen.queryAllByText(/additional references:/i)[0]
      ).toHaveTextContent(
        `Additional references: ${occurrence.vulnerabilities[0].relatedUrls
          .map((url, index) => index + 1)
          .join(", ")}`
      );

      const renderedReferences = screen.queryAllByText(
        /additional references:/i
      )[0];
      occurrence.vulnerabilities[0].relatedUrls.forEach((url, index) => {
        const renderedLink = within(renderedReferences).getByText(
          `${index + 1}`
        );

        expect(renderedLink).toHaveAttribute("href", url.url);
      });
    });

    it("should show 'N/A' for unspecified severities", () => {
      occurrence.vulnerabilities[0].effectiveSeverity = "SEVERITY_UNSPECIFIED";
      rerender(<VulnerabilityOccurrenceDetails occurrence={occurrence} />);

      expect(screen.getByText(/severity n\/a/i)).toBeInTheDocument();
    });
  });
});
