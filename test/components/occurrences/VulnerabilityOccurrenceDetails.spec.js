/**
 * Copyright 2021 The Rode Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from "react";
import { render, screen } from "@testing-library/react";
import VulnerabilityOccurrenceDetails from "components/occurrences/VulnerabilityOccurrenceDetails";
import { createMockMappedVulnerabilityOccurrence } from "test/testing-utils/mocks";
import { getVulnerabilityBreakdown } from "utils/occurrence-utils";
import dayjs from "dayjs";

jest.mock("dayjs");

describe("VulnerabilityOccurrenceDetails", () => {
  let occurrence, rerender;

  beforeEach(() => {
    occurrence = createMockMappedVulnerabilityOccurrence();
    dayjs.mockReturnValue({
      format: jest
        .fn()
        .mockReturnValueOnce(occurrence.started)
        .mockReturnValue(occurrence.completed),
    });

    const utils = render(
      <VulnerabilityOccurrenceDetails occurrence={occurrence} />
    );
    rerender = utils.rerender;
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it("should display the summary details of the scan", () => {
    expect(screen.getByText("Vulnerability Scan")).toBeInTheDocument();
    expect(screen.getByText(/vulnerabilities found/i)).toBeInTheDocument();
    expect(
      screen.getByText(getVulnerabilityBreakdown(occurrence.vulnerabilities))
    ).toBeInTheDocument();
    expect(
      screen.getByText(`Started ${occurrence.started}`)
    ).toBeInTheDocument();
    expect(
      screen.getByText(`Completed ${occurrence.completed}`)
    ).toBeInTheDocument();
    expect(
      screen.getByRole("button", { name: "Show JSON" })
    ).toBeInTheDocument();
  });

  it("should display the short description of the note if it exists", () => {
    const shortDescription = chance.string();
    occurrence.notes = {
      shortDescription,
    };
    rerender(<VulnerabilityOccurrenceDetails occurrence={occurrence} />);
    expect(screen.getByText(shortDescription)).toBeInTheDocument();
    expect(screen.queryByText("Vulnerability Scan")).not.toBeInTheDocument();
  });

  it("should display the long description of the related note if it exists", () => {
    const longDescription = chance.string();
    occurrence.notes = {
      longDescription,
    };
    rerender(<VulnerabilityOccurrenceDetails occurrence={occurrence} />);
    expect(screen.getByText(longDescription)).toBeInTheDocument();
  });

  it("should display the related urls of the note if they exist", () => {
    const relatedUrl = chance.n(
      () => ({
        url: chance.url(),
        label: chance.string(),
      }),
      chance.d4()
    );
    occurrence.notes = {
      relatedUrl,
    };
    rerender(<VulnerabilityOccurrenceDetails occurrence={occurrence} />);

    relatedUrl.forEach((url) => {
      const renderedUrl = screen.getByText(url.label);
      expect(renderedUrl).toBeInTheDocument();
      expect(renderedUrl).toHaveAttribute("href", url.url);
    });
  });

  it("should show a card for each vulnerability found", () => {
    occurrence.vulnerabilities.forEach((vuln, index) => {
      expect(screen.getByText(vuln.packageName)).toBeInTheDocument();
      expect(screen.getAllByText("Severity")[index]).toBeInTheDocument();
      expect(
        screen.getAllByText(vuln.effectiveSeverity)[0]
      ).toBeInTheDocument();
    });
  });

  it("should show the scan as 'In Progress' if no complete time is specified", () => {
    occurrence.completed = null;
    rerender(<VulnerabilityOccurrenceDetails occurrence={occurrence} />);
    expect(screen.getByText("Scan In Progress")).toBeInTheDocument();
    expect(
      screen.queryByText(/vulnerabilities found/i)
    ).not.toBeInTheDocument();

    expect(screen.getByText("Completed N/A")).toBeInTheDocument();
  });
});
