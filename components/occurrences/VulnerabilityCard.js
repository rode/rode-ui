/**
 * Copyright 2021 The Rode Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React, { useState } from "react";
import PropTypes from "prop-types";
import styles from "styles/modules/OccurrenceDetails.module.scss";
import Icon from "components/Icon";
import { ICON_NAMES } from "utils/icon-utils";
import Button from "components/Button";

const getIconRepresentation = (severity) => {
  let iconCount = 1;

  if (severity === "MEDIUM") {
    iconCount = 2;
  } else if (severity === "HIGH" || severity === "CRITICAL") {
    iconCount = 3;
  }

  return (
    <span className={styles[severity.toLowerCase()]}>
      {[...Array(iconCount)].map((_, index) => (
        <Icon key={index} name={ICON_NAMES.FIRE} size={"large"} />
      ))}
    </span>
  );
};

const VulnerabilityCard = ({ vulnerability }) => {
  const [showDetails, setShowDetails] = useState(false);

  const toggleDetails = () => setShowDetails(!showDetails);

  return (
    <div className={styles.card}>
      <div className={styles.vulnerabilityCardHeader}>
        <p className={styles.cardTitle}>Package: {vulnerability.packageName}</p>
        <div className={styles.severity}>
          <p>
            Severity{" "}
            {vulnerability.effectiveSeverity === "SEVERITY_UNSPECIFIED"
              ? "N/A"
              : vulnerability.effectiveSeverity}
          </p>
          {getIconRepresentation(vulnerability.effectiveSeverity)}
          <Button
            buttonType={"icon"}
            onClick={toggleDetails}
            label={"Toggle Vulnerability Details"}
          >
            <Icon name={ICON_NAMES.CHEVRON_RIGHT} />
          </Button>
        </div>
      </div>
      {!!showDetails && (
        <div>
          {vulnerability.description && (
            <p>{`Description: ${vulnerability.description}`}</p>
          )}
          <p className={styles.link}>
            More details:{" "}
            <a href={vulnerability.cpeUri}>{vulnerability.cpeUri}</a>
          </p>
          {vulnerability.relatedUrls.length > 0 && (
            <p className={styles.link}>
              Additional references:{" "}
              {vulnerability.relatedUrls
                .map(({ url }, index) => (
                  <a key={url} href={url}>
                    {index + 1}
                  </a>
                ))
                .reduce((prev, curr) => [prev, ", ", curr])}
            </p>
          )}
        </div>
      )}
    </div>
  );
};

VulnerabilityCard.propTypes = {
  vulnerability: PropTypes.object.isRequired,
};

export default VulnerabilityCard;
