/**
 * Copyright 2021 The Rode Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from "react";
import PropTypes from "prop-types";
import styles from "styles/modules/OccurrenceDetails.module.scss";
import Icon from "components/Icon";
import { ICON_NAMES } from "utils/icon-utils";
import LabelWithValue from "components/LabelWithValue";
import ToggleCard from "components/ToggleCard";
import Text from "components/Text";

const getIconRepresentation = (severity) => {
  let iconCount = 1;

  if (severity === "MEDIUM") {
    iconCount = 2;
  } else if (severity === "HIGH" || severity === "CRITICAL") {
    iconCount = 3;
  }

  return (
    <span className={styles[severity.toLowerCase()]}>
      {[...Array(iconCount)].map((_, index) => (
        <Icon key={index} name={ICON_NAMES.FIRE} size={"large"} />
      ))}
    </span>
  );
};

const VulnerabilityCard = ({ vulnerability }) => {
  return (
    <ToggleCard
      className={styles.card}
      header={
        <div className={styles.vulnerabilityCardHeader}>
          <LabelWithValue
            label={"Package"}
            value={vulnerability.packageName}
            className={styles.cardTitle}
          />
          <div className={styles.severity}>
            <LabelWithValue
              label={"Severity"}
              value={
                vulnerability.effectiveSeverity === "SEVERITY_UNSPECIFIED"
                  ? "N/A"
                  : vulnerability.effectiveSeverity
              }
            />
            {getIconRepresentation(vulnerability.effectiveSeverity)}
          </div>
        </div>
      }
      content={
        <div>
          {vulnerability.description && (
            <Text.Body1 className={styles.leftMargin}>
              {vulnerability.description}
            </Text.Body1>
          )}
          <LabelWithValue
            label={"More details"}
            value={<a href={vulnerability.cpeUri}>{vulnerability.cpeUri}</a>}
            className={styles.link}
          />
          {vulnerability.relatedUrls.length > 0 && (
            <LabelWithValue
              label={"Additional references"}
              value={vulnerability.relatedUrls
                .map(({ url }, index) => (
                  <a key={url} href={url}>
                    {index + 1}
                  </a>
                ))
                .reduce((prev, curr) => [prev, ", ", curr])}
              className={styles.link}
            />
          )}
        </div>
      }
    />
  );
};

VulnerabilityCard.propTypes = {
  vulnerability: PropTypes.object.isRequired,
};

export default VulnerabilityCard;
