/**
 * Copyright 2021 The Rode Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from "react";
import PropTypes from "prop-types";
import dayjs from "dayjs";
import styles from "styles/modules/OccurrenceDetails.module.scss";
import { DATE_TIME_FORMAT } from "utils/constants";
import Icon from "components/Icon";
import { ICON_NAMES } from "utils/icon-utils";
import { getVulnerabilityBreakdown } from "utils/occurrence-utils";

const getIconRepresentation = (severity) => {
  let iconCount = 1;

  if (severity === "MEDIUM") {
    iconCount = 2;
  } else if (severity === "HIGH" || severity === "CRITICAL") {
    iconCount = 3;
  }

  return (
    <span className={styles[severity.toLowerCase()]}>
      {[...Array(iconCount)].map((_, index) => (
        <Icon key={index} name={ICON_NAMES.FIRE} size={"large"} />
      ))}
    </span>
  );
};

const VulnerabilityOccurrenceDetails = ({ occurrence }) => {
  return (
    <div>
      <div className={styles.detailSummary}>
        <div>
          <p className={styles.title}>Vulnerability Scan</p>
          <p>{occurrence.vulnerabilities.length} vulnerabilities found</p>
          <p className={styles.vulnerabilityBreakdown}>
            {getVulnerabilityBreakdown(occurrence.vulnerabilities)}
          </p>
        </div>
        <div className={styles.timestamps}>
          <p>Started {dayjs(occurrence.started).format(DATE_TIME_FORMAT)}</p>
          <p>
            Completed {dayjs(occurrence.completed).format(DATE_TIME_FORMAT)}
          </p>
        </div>
      </div>
      <div className={styles.detailContentContainer}>
        {occurrence.vulnerabilities.map((vuln) => (
          <div key={vuln.name} className={styles.card}>
            <div className={styles.vulnerabilityCardHeader}>
              <p className={styles.cardTitle}>Package: {vuln.packageName}</p>
              <div className={styles.severity}>
                <p>
                  Severity{" "}
                  {vuln.effectiveSeverity === "SEVERITY_UNSPECIFIED"
                    ? "N/A"
                    : vuln.effectiveSeverity}
                </p>
                {getIconRepresentation(vuln.effectiveSeverity)}
              </div>
            </div>
            {vuln.description && <p>Description: {vuln.description}</p>}
            <p className={styles.link}>
              More details: <a href={vuln.cpeUri}>{vuln.cpeUri}</a>
            </p>
            {vuln.relatedUrls.length > 0 && (
              <p className={styles.link}>
                Additional references:{" "}
                {vuln.relatedUrls
                  .map(({ url }, index) => (
                    <a key={url} href={url}>
                      {index + 1}
                    </a>
                  ))
                  .reduce((prev, curr) => [prev, ", ", curr])}
              </p>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

VulnerabilityOccurrenceDetails.propTypes = {
  occurrence: PropTypes.object.isRequired,
};

export default VulnerabilityOccurrenceDetails;
